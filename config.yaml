#
# dockerfile-builder config
#
file:
  name: dockerfile-builder.yaml

# Stages
stages:
  project:
    desc: "Project data"
    expand_vars: False
  builder:
    desc: "Configurations used during the dockerfile build"
    expand_vars:
      processes: False
  general:
    desc: "General data used as base in other stages"
    expand_vars:
      processes: False
  build:
    desc: "Data and configurations used during Dockerfile build"
    expand_vars:
      processes: False
  setup:
    desc: "Data and configurations used during docker image creation"
    expand_vars:
      processes: False
  config:
    desc: "Data and configurations used during container configuration"
    expand_vars:
      processes: False
  cache:
    desc: "Data and configurations used to speed up testing process warming the cache"
    expand_vars:
      processes: True
  test:
    desc: "Data and configurations used during container testing"
    expand_vars:
      processes: True
  travis:
    desc: "Data and configurations used during container testing on travis"
    expand_vars:
      processes: True
  push:
    desc: "Data and configurations used during image pushing process"
    expand_vars:
      processes: True
    
# Defaults values used as base for dockerfile-builds
defaults:
  #
  # General data used as label or test values
  #
  general:
    envvars:
      docker:
        users:
          dev:
            valueFromCommand: echo "${DOCKER_DEV_USER}"
          prd:
            valueFromCommand: echo "${DOCKER_USER}"
        user:
          valueFromParse: $GENERAL_DOCKER_USERS_PRD
        registries:
          dev:
            valueFromCommand: echo "${DOCKER_DEV_REGISTRY}"
          prd:
            valueFromCommand: echo "${DOCKER_REGISTRY}"
        registry:
          valueFromParse: $GENERAL_DOCKER_REGISTRIES_PRD
      keys:
        true: "True"
        false: "False"
        dev: "dev"
        prd: "prd"
  #
  # Project data:
  #
  project:
    title: "Project title"
    codename: "project-codename"
    description: "Project description"

  #
  # Cache data:
  # ex: All docker images used for build and test
  #
  cache:
    envvars:
      main:
        valueFromParse: $BUILD_FROM
  #
  # Builder stage:
  #
  # Configuration for the builder
  #
  #dockerfile-builder:
  builder:
    envvars:
      # Target paths of build files
      targets:
        folders:
          build: # Builder pool -> Where dockerfile is
            binaries: "bin"
            imports: "imports"
            volumes: "volumes"
            dockerfile:
              binaries:
                valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_IMPORTS/bin"
          container: # Setup pool -> Inside container
            binaries: /usr/local/bin
            setup:
              valueFromParse: "$BUILDER_TARGETS_FOLDERS_CONTAINER_BINARIES/setup"
            config:
              valueFromParse: "$BUILDER_TARGETS_FOLDERS_CONTAINER_BINARIES/config"
        build:
          # First level
          dockerfile: "Dockerfile"
          readme: "README.md"
          dockerignore: ".dockerignore"
          master_gitignore: ".gitignore"
          travis: ".travis.yml"
          # Extra binaries used to manage repo and create image
          bin_git_deploy_branches:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_BINARIES/deploy-branches"
          bin_cache_warm:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_BINARIES/cache-warm"
          bin_build:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_BINARIES/build"
          bin_test:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_BINARIES/test"
          bin_test_container:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_BINARIES/test_container"
          bin_push:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_BINARIES/push"
          # Binaries used in docker-build and containers
          imports_setup:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_DOCKERFILE_BINARIES/setup"
          imports_config:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_DOCKERFILE_BINARIES/config"
          imports_docker_config:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_DOCKERFILE_BINARIES/docker-config"
          imports_docker_run:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_DOCKERFILE_BINARIES/docker-run"
          imports_docker_rediness_test:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_DOCKERFILE_BINARIES/docker-rediness-test"
          imports_docker_liveness_test:
            valueFromParse: "$BUILDER_TARGETS_FOLDERS_BUILD_DOCKERFILE_BINARIES/docker-liveness-test"
        container:
          setup:
            valueFromCommand: 'echo "$BUILDER_TARGETS_FOLDERS_CONTAINER_SETUP/$(date +%s)"'
          config:
            valueFromCommand: 'echo "$BUILDER_TARGETS_FOLDERS_CONTAINER_CONFIG/$(date +%s)"'
          docker_config:
            valueFromCommand: 'echo "$BUILDER_TARGETS_FOLDERS_CONTAINER_BINARIES/docker-config"'
          docker_run:
            valueFromCommand: 'echo "$BUILDER_TARGETS_FOLDERS_CONTAINER_BINARIES/docker-run"'
          docker_rediness_test:
            valueFromCommand: 'echo "$BUILDER_TARGETS_FOLDERS_CONTAINER_BINARIES/docker-rediness-test"'
          docker_liveness_test:
            valueFromCommand: 'echo "$BUILDER_TARGETS_FOLDERS_CONTAINER_BINARIES/docker-liveness-test"'
          
    # File read to build
    file:
      name: "dockerfile-builder.yaml"
    folders:
      templates: "templates"
    # Template key > template file
    templates:
      # First level template
      dockerfile: "Dockerfile"
      readme: "README.md"
      dockerignore: ".dockerignore"
      master_gitignore: "master.gitignore"
      travis: "travis"
      # Templates for binaries used to manage docker image ad repo
      bin_git_deploy_branches: "deploy-branches"
      bin_cache_warm: "cache-warm"
      bin_build: "build"
      bin_test: "test"
      bin_test_container: "test_container"
      bin_push: "push"
      # Templates for binaries used in container
      imports_setup: "setup"
      imports_config: "config"
      imports_docker_config: "docker-config"
      imports_docker_config_users_groups: "docker-config-users-groups"
      imports_docker_run: "docker-run"
      imports_docker_rediness_test: "docker-rediness-test"
      imports_docker_liveness_test: "docker-liveness-test"
    # Define which templates must be built for each branch
    branch2templates:
      master:
        - key: readme
        - key: master_gitignore
        - key: bin_git_deploy_branches
          mode: 754
      default:
        - key: readme
        # Build imported file
        - key: imports_docker_config
          mode: 754
        - key: imports_docker_run
          mode: 754
        - key: imports_docker_rediness_test
          mode: 754
        - key: imports_docker_liveness_test
          mode: 754
        - key: imports_setup
          mode: 754
        - key: imports_config
          mode: 754
        # Build docker file
        - key: dockerfile
        - key: dockerignore
        - key: travis
        # Build extra files to build test and push
        - key: bin_cache_warm
          mode: 754
        - key: bin_build
          mode: 754
        - key: bin_test
          mode: 754
        - key: bin_test_container
          mode: 754
        - key: bin_push
          mode: 754
    imports:
      - "$BUILDER_TARGETS_BUILD_IMPORTS_DOCKER_CONFIG:$BUILDER_TARGETS_CONTAINER_DOCKER_CONFIG"
      - "$BUILDER_TARGETS_BUILD_IMPORTS_DOCKER_RUN:$BUILDER_TARGETS_CONTAINER_DOCKER_RUN"
      - "$BUILDER_TARGETS_BUILD_IMPORTS_DOCKER_REDINESS_TEST:$BUILDER_TARGETS_CONTAINER_DOCKER_REDINESS_TEST"
      - "$BUILDER_TARGETS_BUILD_IMPORTS_DOCKER_LIVENESS_TEST:$BUILDER_TARGETS_CONTAINER_DOCKER_LIVENESS_TEST"
      - "$BUILDER_TARGETS_BUILD_IMPORTS_SETUP:$BUILDER_TARGETS_CONTAINER_SETUP"
      - "$BUILDER_TARGETS_BUILD_IMPORTS_CONFIG:$BUILDER_TARGETS_CONTAINER_CONFIG"
  cache:
    envars: {}
    docker_images:
      - $BUILD_FROM
  
  #
  # Build stage:
  # Creating files from templates
  #
  build:
    args:
      commit: '$(git rev-parse HEAD)'
      date: '$(date -u +"%Y-%m-%dT%H:%M:%SZ")'
    envvars:
      user:
        valueFromParse: $GENERAL_DOCKER_USERS_DEV
      registry:
        valueFromParse: $GENERAL_DOCKER_REGISTRIES_DEV
      name: "project-build-name"
      repo:
        valueFromParse: "https://github.com/alphaSocket/dockerized-${BUILD_NAME}"
      branch:
        valueFromCommand: 'git rev-parse --abbrev-ref HEAD'
      #commit:
      #  valueFromCommand: 'git rev-parse --short HEAD'
      version:
        valueFromCommand: '[ "$BUILD_BRANCH" = "master" ] && echo "latest" || echo "$BUILD_BRANCH"'
      env:
        valueFromCommand: 'env=$(echo $BUILD_BRANCH | cut -d \- -f 2); [ "$env" = "$BUILD_VERSION" ] && echo $GENERAL_KEYS_PRD || echo $env'
      from: alpine:latest
      ports:
        main: ""
        additional: ""
    imports: []
        
  #
  # Setup stage:
  # Script run during build of the docker image
  #
  setup:
    envvars:
      paths:
        binaries:
          valueFromParse: $BUILDER_TARGETS_FOLDERS_CONTAINER_BINARIES
        setup:
          valueFromParse: $BUILDER_TARGETS_FOLDERS_CONTAINER_SETUP
        config:
          valueFromParse: $BUILDER_TARGETS_FOLDERS_CONTAINER_CONFIG
      dependencies:
        setup: ""
        config: ""
        runtime: ""
    # Setup Processes
    processes_before: 
      - title: "Install all dependencies"
        commands:
          - "apk add --no-cache gettext $SETUP_DEPENDENCIES_SETUP $SETUP_DEPENDENCIES_CONFIG $SETUP_DEPENDENCIES_RUNTIME"
    
    processes: []
    
    processes_after: []
      #- title: "Remove unecessary dependencies"
      #  commands:
      #    - UNNECESSARY_DEPENDENDCY_SETUP=$( )
      #    - "apk del $SETUP_DEPENDENCIES_SETUP"
      
      
  #
  # Config stage:
  # Scripts run to configure the container before run
  #
  config:
    envvars:
      groups:
        main:
          id: 1000
          name: 'docker'
        additional:
          id: 1001
          name: ''
      users:
        main:
          id: 1000
          name: 'docker'
          groups: 'docker'
        additional:
          id: 1001
          name: ''
          groups: ''
      rediness:
        test: "true"
      liveness:
        test: "true"
      paths:
        container:
          status: /tmp/container_status
    processes_before: []
    processes: []
    processes_after:
      - title: "Remove unecessary dependencies"
        commands:
          - "apk del $SETUP_DEPENDENCIES_CONFIG"

  #
  # Test stage:
  # Scripts run to test the container once started
  #
  test:
    envvars:
      container:
        ports:
          main:
            valueFromParse: $BUILD_PORTS_MAIN
          additional:
            valueFromParse: $BUILD_PORTS_ADDITIONAL
            
        name:
          valueFromParse: $BUILD_NAME
      host:
        port:
          valueFromCommand: "shuf -i 30000-32000 -n 1"
      image:
        user:
          valueFromParse: $BUILD_USER
        name:
          valueFromParse: $BUILD_NAME
        version:
          valueFromParse: $BUILD_VERSION
    processes: []

  #
  # Push stage:
  # Variables used to push the docker images
  #
  push:
    envvars:
      docker:
        dev:
          registry:
            valueFromParse: $BUILD_REGISTRY
          user:
            valueFromParse: $BUILD_USER
        registry:
          valueFromParse: $GENERAL_DOCKER_REGISTRY
        user:
          valueFromParse: $GENERAL_DOCKER_USER
      image:
        name:
          valueFromParse: $BUILD_NAME
        version: 
          valueFromParse: $BUILD_VERSION


